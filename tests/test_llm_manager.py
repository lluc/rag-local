"""
Script de test pour le LLMManager
"""

import sys
from pathlib import Path

# Ajouter le dossier parent au path pour importer les modules
sys.path.insert(0, str(Path(__file__).parent.parent))

from llm_manager import LLMManager


def test_model_check():
    """Test de v√©rification de mod√®le"""
    print("="*60)
    print("TEST 1: V√©rification de mod√®le existant")
    print("="*60)

    manager = LLMManager()

    # Test avec un mod√®le qui n'existe pas
    exists = manager.check_model_exists("./models/non_existent.gguf")
    print(f"R√©sultat: {exists}")
    assert not exists, "Le mod√®le ne devrait pas exister"
    print("‚úì Test pass√©\n")


def test_list_models():
    """Test de listage des mod√®les"""
    print("="*60)
    print("TEST 2: Listage des mod√®les locaux")
    print("="*60)

    manager = LLMManager()
    models = manager.list_available_models()
    print(f"Nombre de mod√®les trouv√©s: {len(models)}")
    for model in models:
        print(f"  - {model}")
    print("‚úì Test pass√©\n")


def test_recommended_models():
    """Test des mod√®les recommand√©s"""
    print("="*60)
    print("TEST 3: Mod√®les recommand√©s")
    print("="*60)

    manager = LLMManager()
    recommended = manager.get_recommended_models()
    print(f"Nombre de mod√®les recommand√©s: {len(recommended)}")
    assert len(recommended) > 0, "Il devrait y avoir des mod√®les recommand√©s"

    for key, info in recommended.items():
        print(f"\n{key}:")
        print(f"  Description: {info['description']}")
        print(f"  Taille: {info['size']}")
    print("\n‚úì Test pass√©\n")


def test_get_model_no_download():
    """Test de r√©cup√©ration sans t√©l√©chargement automatique"""
    print("="*60)
    print("TEST 4: R√©cup√©ration sans t√©l√©chargement auto")
    print("="*60)

    manager = LLMManager()

    try:
        # Essayer de r√©cup√©rer sans t√©l√©chargement automatique
        model_path = manager.get_or_download_model(
            model_path="./models/non_existent.gguf",
            auto_download=False
        )
        print(f"‚ùå Le test devrait √©chouer mais a retourn√©: {model_path}")
    except FileNotFoundError as e:
        print(f"‚úì Exception attendue captur√©e: {e}")
        print("‚úì Test pass√©\n")


if __name__ == "__main__":
    print("\nüß™ TESTS DU LLM MANAGER\n")

    try:
        test_model_check()
        test_list_models()
        test_recommended_models()
        test_get_model_no_download()

        print("="*60)
        print("‚úÖ TOUS LES TESTS ONT R√âUSSI")
        print("="*60)

    except AssertionError as e:
        print(f"\n‚ùå √âCHEC DU TEST: {e}")
    except Exception as e:
        print(f"\n‚ùå ERREUR INATTENDUE: {e}")
