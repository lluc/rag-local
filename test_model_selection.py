#!/usr/bin/env python3
"""
Test de s√©lection de mod√®le pour v√©rifier que Llama-3.2-3B est choisi par d√©faut
"""

import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire courant au path pour les imports
sys.path.insert(0, os.getcwd())

def test_model_selection():
    """Test de s√©lection de mod√®le sans d√©pendances lourdes"""

    try:
        from llm_manager import LLMManager

        # Cr√©er le gestionnaire
        manager = LLMManager(models_dir="./models")

        print("üß™ Test de s√©lection de mod√®le")
        print("=" * 50)

        # Test 1: V√©rifier que le mod√®le Llama-3.2-3B existe
        llama_path = manager.models_dir / "Llama-3.2-3B-Instruct-Q4_K_M.gguf"
        if llama_path.exists():
            print(f"‚úÖ Llama-3.2-3B trouv√©: {llama_path}")
        else:
            print(f"‚ùå Llama-3.2-3B NON trouv√©: {llama_path}")
            return False

        # Test 2: V√©rifier que la cl√© existe dans RECOMMENDED_MODELS
        if "llama-3.2-3b" in manager.RECOMMENDED_MODELS:
            print(f"‚úÖ Cl√© 'llama-3.2-3b' trouv√©e dans RECOMMENDED_MODELS")
            filename = manager.RECOMMENDED_MODELS["llama-3.2-3b"]["filename"]
            print(f"   Nom de fichier attendu: {filename}")
        else:
            print(f"‚ùå Cl√© 'llama-3.2-3b' NON trouv√©e dans RECOMMENDED_MODELS")
            return False

        # Test 3: Simuler get_or_download_model (sans auto_download pour √©viter l'interaction)
        print(f"\nüîç Test de get_or_download_model avec model_key='llama-3.2-3b'")

        # Cr√©er une version modifi√©e sans interaction utilisateur
        try:
            result = manager.get_or_download_model(
                model_path=None,
                model_key="llama-3.2-3b",
                auto_download=False  # Pas de t√©l√©chargement automatique
            )
            print(f"‚úÖ Mod√®le s√©lectionn√©: {result}")

            # V√©rifier que c'est bien le bon mod√®le
            if "Llama-3.2-3B-Instruct-Q4_K_M.gguf" in result:
                print(f"‚úÖ SUCCESS: Le bon mod√®le Llama-3.2-3B a √©t√© s√©lectionn√©!")
                return True
            else:
                print(f"‚ùå ERREUR: Mauvais mod√®le s√©lectionn√© (attendu: Llama-3.2-3B)")
                return False

        except Exception as e:
            print(f"‚ùå Erreur lors de la s√©lection: {e}")
            return False

    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False

if __name__ == "__main__":
    success = test_model_selection()
    if success:
        print(f"\nüéâ Tous les tests r√©ussis! Llama-3.2-3B sera utilis√© par d√©faut.")
        sys.exit(0)
    else:
        print(f"\nüí• Tests √©chou√©s! Le mod√®le par d√©faut pourrait ne pas √™tre correct.")
        sys.exit(1)